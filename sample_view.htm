<!DOCTYPE html>
<html>
 <head>
  <meta charset=utf-8>
  <title>Sample Render</title>
  <meta name="viewport" content="width=device-width" />
 </head>
 <body>
    <!-- Three.js core libraries. three.min.js is required for rendering, while OrbitControls.js is used for user input -->
    <script src="js/three.min.js"></script><script src="js/OrbitControls.js"></script>

    <!-- Three.js libraries for supporting Outline Pass -->
    <script src="js/CopyShader.js"></script><script src="js/Pass.js"></script><script src="js/OutlinePass.js"></script><script src="js/ShaderPass.js"></script><script src="js/RenderPass.js"></script><script src="js/MaskPass.js"></script><script src="js/EffectComposer.js"></script>

    <!-- buildinginstructions.js core libraries. All required. -->
    <script src="js/colors.js"></script><script src="js/LDRShaders.js"></script><script src="js/LDRColorMaterials.js"></script><script src="js/LDRGeometries.js"></script><script src="js/LDRLoader.js"></script>

    <!-- buildinginstructions.js optional libraries: Generator.js for quick creation of some primitives. Required for studs.js which can create customized studs. StudioTexmap.js allows for Studio 2.0-created files -->
    <script src="js/LDRGenerator.js"></script>
    <script src="js/LDRStuds.js"></script>
    <script src="js/StudioTexmap.js"></script>

    <script>
      let startTime = new Date();

      let model = 'models/corvette_full.mpd'; // The model to be rendered:
      //let model = 'models/luminance.ldr';
      if ('function' === typeof URL.parse)
      {
          let query = decodeURIComponent(URL.parse(window.location).searchParams.get('f'));
          if (query != null)
          {
              model = query; //use file/model specified in URL
          }
      }
      else
      {
          let query = window.location.search,
              pos = query.indexOf('?f=');
          if (pos < 0)
          {
              pos = query.indexOf('&f=');
          }
          if (pos >= 0)
          {
              let endPos = query.indexOf('&');
              if (endPos < 0) endPos = query.length;
              model = decodeURIComponent(query.substring(pos + 3, endPos));
          }
      }

      // Set up camera:
      let camera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0.1, 1000000);

      // Set up scene:
      let scene = new THREE.Scene();
      scene.background = new THREE.Color(0xFFFFFF);

      let baseObject = new THREE.Group(), opaqueObject = new THREE.Group(), sixteenObject = new THREE.Group(); transObject = new THREE.Group();
      baseObject.add(opaqueObject); baseObject.add(sixteenObject); baseObject.add(transObject); scene.add(baseObject); // Draw non-trans before trans.
      let mc = new LDR.MeshCollector(opaqueObject, sixteenObject, transObject);

      // Set up renderer:
      let composer = null, storage;
      let renderer = new THREE.WebGLRenderer({antialias: true});
      renderer.setPixelRatio(window.devicePixelRatio);
      document.body.appendChild(renderer.domElement);

      let render = () => composer === null ? renderer.render(scene, camera) : composer.render();

      function onWindowResize(){
        const w = window.innerWidth;
        const h = window.innerHeight;
        camera.left = -(camera.right = w);
        camera.bottom = -(camera.top = h);
        camera.updateProjectionMatrix();

        renderer.setSize(w, h);

        composer = new THREE.EffectComposer(renderer);
        composer.addPass(new THREE.RenderPass(scene, camera));
        if(!mc.attachGlowPasses(w, h, scene, camera, composer)) {
          composer = null; // Nothing glows - just render directly.
        }
        render();
      }

      // React to user input:
      let controls = new THREE.OrbitControls(camera, renderer.domElement);
      controls.addEventListener('change', render);
      window.addEventListener('resize', onWindowResize, false);

      // Three.js loader for LDraw models:
      let ldrLoader;

      let onLoad = function() {
        ldrLoader.generate(14, mc);

        // Find center of drawn model:
        let b = mc.boundingBox;
        let elementCenter = new THREE.Vector3();
        b.getCenter(elementCenter);
        baseObject.position.set(-elementCenter.x, -elementCenter.y, -elementCenter.z);
        //baseObject.add(new THREE.Box3Helper(b, 0x0000FF)); // Uncomment if you want to see the bounding box

        let size = b.min.distanceTo(b.max);
        camera.position.set(size, 0.7*size, size);
        camera.lookAt(new THREE.Vector3());
        camera.far = 2*size;
    camera.zoom = 1.5*window.innerWidth/size;
        onWindowResize();

        console.log("Model rendered in " + (new Date()-startTime) + "ms.");
      }

      LDR.Studs.makeGenerators('', 0, 1);
      ldrLoader = new THREE.LDRLoader(onLoad, null, {cleanUpPrimitivesAndSubParts:false});
      ldrLoader.load(model);
 </script>
 </body>
</html>
